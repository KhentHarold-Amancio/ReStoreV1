{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport React, { useEffect, useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport { PieChartMain } from \"./main\";\nimport { pieColors } from \"../utils/constants\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport var PieChart = function PieChart(props) {\n  var _props$extraRadiusFor;\n  var radius = props.radius || 120;\n  var extraRadiusForFocused = ((_props$extraRadiusFor = props.extraRadiusForFocused) != null ? _props$extraRadiusFor : props.focusOnPress || props.sectionAutoFocus) ? radius / 10 : 0;\n  var pi = props.semiCircle ? Math.PI / 2 : Math.PI;\n  var _useState = useState(-1),\n    _useState2 = _slicedToArray(_useState, 2),\n    selectedIndex = _useState2[0],\n    setSelectedIndex = _useState2[1];\n  var _useState3 = useState(props.initialAngle || (props.semiCircle ? -pi : 0)),\n    _useState4 = _slicedToArray(_useState3, 2),\n    startAngle = _useState4[0],\n    setStartAngle = _useState4[1];\n  var _useState5 = useState(0),\n    _useState6 = _slicedToArray(_useState5, 2),\n    total = _useState6[0],\n    setTotal = _useState6[1];\n  useEffect(function () {\n    var newTotal = 0;\n    props.data.forEach(function (item) {\n      newTotal += item.value;\n    });\n    setTotal(newTotal);\n    var newSelectedIndex = props.data.findIndex(function (item) {\n      return item.focused === true;\n    });\n    setSelectedIndex(newSelectedIndex);\n    var newStartAngle = props.initialAngle || (props.semiCircle ? -pi : 0);\n    if (newSelectedIndex !== -1) {\n      var sumBeforeSelectedIndex = props.data.slice(0, newSelectedIndex).reduce(function (acc, item) {\n        return acc + item.value;\n      }, 0);\n      setStartAngle(newStartAngle + 2 * pi * sumBeforeSelectedIndex / (newTotal || 1));\n    } else {\n      setStartAngle(newStartAngle);\n    }\n  }, [props.data, props.initialAngle, props.semiCircle]);\n  useEffect(function () {\n    if (selectedIndex !== -1) {\n      var newStartAngle = props.initialAngle || (props.semiCircle ? -pi : 0);\n      var start = 0;\n      for (var i = 0; i < selectedIndex; i++) {\n        start += props.data[i].value;\n      }\n      if (total) {\n        setStartAngle(newStartAngle + 2 * pi * start / (total || 1));\n      }\n    }\n  }, [selectedIndex]);\n  if (!total) return null;\n  return _jsxs(View, {\n    style: {\n      height: (radius + extraRadiusForFocused) * 2,\n      width: (radius + extraRadiusForFocused) * 2,\n      marginLeft: extraRadiusForFocused * 2,\n      marginTop: extraRadiusForFocused * 2\n    },\n    children: [props.data.length > 1 && props.data[selectedIndex] && (props.focusOnPress || props.sectionAutoFocus) && selectedIndex !== -1 && _jsx(View, {\n      style: {\n        position: 'absolute',\n        top: -extraRadiusForFocused,\n        left: -extraRadiusForFocused\n      },\n      children: _jsx(PieChartMain, _objectSpread(_objectSpread({}, props), {}, {\n        data: [{\n          value: props.data[selectedIndex].value,\n          color: props.data[selectedIndex].color || pieColors[selectedIndex % 9],\n          strokeColor: props.data[selectedIndex].strokeColor || undefined,\n          strokeWidth: props.data[selectedIndex].strokeWidth || undefined,\n          gradientCenterColor: props.data[selectedIndex].gradientCenterColor || undefined\n        }, {\n          value: total - props.data[selectedIndex].value,\n          peripheral: true,\n          strokeWidth: 0\n        }],\n        radius: radius + extraRadiusForFocused,\n        initialAngle: startAngle,\n        showText: false,\n        innerRadius: props.innerRadius || radius / 2.5,\n        isBiggerPie: true,\n        setSelectedIndex: setSelectedIndex\n      }))\n    }), _jsx(View, {\n      style: {\n        position: 'absolute'\n      },\n      children: _jsx(PieChartMain, _objectSpread(_objectSpread({}, props), {}, {\n        selectedIndex: selectedIndex,\n        setSelectedIndex: setSelectedIndex\n      }))\n    })]\n  });\n};","map":{"version":3,"names":["React","useEffect","useState","View","PieChartMain","pieColors","jsx","_jsx","jsxs","_jsxs","PieChart","props","_props$extraRadiusFor","radius","extraRadiusForFocused","focusOnPress","sectionAutoFocus","pi","semiCircle","Math","PI","_useState","_useState2","_slicedToArray","selectedIndex","setSelectedIndex","_useState3","initialAngle","_useState4","startAngle","setStartAngle","_useState5","_useState6","total","setTotal","newTotal","data","forEach","item","value","newSelectedIndex","findIndex","focused","newStartAngle","sumBeforeSelectedIndex","slice","reduce","acc","start","i","style","height","width","marginLeft","marginTop","children","length","position","top","left","_objectSpread","color","strokeColor","undefined","strokeWidth","gradientCenterColor","peripheral","showText","innerRadius","isBiggerPie"],"sources":["/home/windss/Documents/ReactNative/fcc/ReStore/ReStoreV1/node_modules/react-native-gifted-charts/src/PieChart/index.tsx"],"sourcesContent":["import React, {useEffect, useState} from 'react';\nimport {View, ColorValue} from 'react-native';\nimport {PieChartMain} from './main';\nimport {FontStyle} from 'react-native-svg';\nimport {pieColors} from '../utils/constants';\n\ntype propTypes = {\n  radius?: number;\n  isThreeD?: boolean;\n  donut?: boolean;\n  innerRadius?: number;\n  shadow?: boolean;\n  innerCircleColor?: ColorValue;\n  innerCircleBorderWidth?: number;\n  innerCircleBorderColor?: ColorValue;\n  shiftInnerCenterX?: number;\n  shiftInnerCenterY?: number;\n  shadowColor?: string;\n  shadowWidth?: number;\n  strokeWidth?: number;\n  strokeColor?: string;\n  backgroundColor?: string;\n  data: Array<itemType>;\n  semiCircle?: boolean;\n\n  showText?: boolean;\n  textColor?: string;\n  textSize?: number;\n  fontStyle?: FontStyle;\n  fontWeight?: string;\n  font?: string;\n  showTextBackground?: boolean;\n  textBackgroundColor?: string;\n  textBackgroundRadius?: number;\n  showValuesAsLabels?: boolean;\n\n  centerLabelComponent?: Function;\n  tiltAngle?: string;\n  initialAngle?: number;\n  labelsPosition?: 'onBorder' | 'outward' | 'inward' | 'mid';\n  showGradient?: boolean;\n  gradientCenterColor?: string;\n  onPress?: Function;\n  focusOnPress?: boolean;\n  toggleFocusOnPress?: boolean;\n  selectedIndex?: number;\n  setSelectedIndex?: Function;\n  sectionAutoFocus?: boolean;\n  onLabelPress?: Function;\n  extraRadiusForFocused?: number;\n};\ntype itemType = {\n  value: number;\n  shiftX?: number;\n  shiftY?: number;\n  color?: string;\n  gradientCenterColor?: string;\n  text?: string;\n  textColor?: string;\n  textSize?: number;\n  fontStyle?: FontStyle;\n  fontWeight?: string;\n  font?: string;\n  textBackgroundColor?: string;\n  textBackgroundRadius?: number;\n  shiftTextX?: number;\n  shiftTextY?: number;\n  labelPosition?: 'onBorder' | 'outward' | 'inward' | 'mid';\n  onPress?: Function;\n  onLabelPress?: Function;\n  strokeWidth?: number;\n  strokeColor?: string;\n  focused?: boolean;\n};\n\nexport const PieChart = (props: propTypes) => {\n  const radius = props.radius || 120;\n  const extraRadiusForFocused =\n    props.extraRadiusForFocused ??\n    (props.focusOnPress || props.sectionAutoFocus)\n      ? radius / 10\n      : 0;\n  const pi = props.semiCircle ? Math.PI / 2 : Math.PI;\n  const [selectedIndex, setSelectedIndex] = useState(-1); // at the start, nothing is selected\n  // because we're going to use a useEffect, we need startAngle and total to be state variables\n  const [startAngle, setStartAngle] = useState(\n    props.initialAngle || (props.semiCircle ? -pi : 0),\n  );\n  const [total, setTotal] = useState(0);\n\n  useEffect(() => {\n    // Update the total, this could be use to replace the forEach : const newTotal = props.data.reduce((acc, item) => acc + item.value, 0);\n    let newTotal = 0;\n    props.data.forEach(item => {\n      newTotal += item.value;\n    });\n    setTotal(newTotal);\n\n    // Update selectedIndex based on focused item\n    const newSelectedIndex = props.data.findIndex(\n      item => item.focused === true,\n    );\n    setSelectedIndex(newSelectedIndex);\n\n    // Calculate the new start angle\n    let newStartAngle = props.initialAngle || (props.semiCircle ? -pi : 0);\n    if (newSelectedIndex !== -1) {\n      // it was !== 0 here before, which would not work, it's either !==-1 or >=0\n      // This could be used to replace the for loop that was used before\n      const sumBeforeSelectedIndex = props.data\n        .slice(0, newSelectedIndex)\n        .reduce((acc, item) => acc + item.value, 0);\n      setStartAngle(\n        newStartAngle + (2 * pi * sumBeforeSelectedIndex) / (newTotal || 1),\n      );\n    } else {\n      setStartAngle(newStartAngle);\n    }\n  }, [props.data, props.initialAngle, props.semiCircle]);\n\n  useEffect(() => {\n    if (selectedIndex !== -1) {\n      const newStartAngle = props.initialAngle || (props.semiCircle ? -pi : 0);\n      let start = 0;\n      for (let i = 0; i < selectedIndex; i++) {\n        start += props.data[i].value;\n      }\n      if (total) {\n        setStartAngle(newStartAngle + (2 * pi * start) / (total || 1));\n      }\n    }\n  }, [selectedIndex]);\n\n  if (!total) return null;\n\n  return (\n    <View\n      style={{\n        height: (radius + extraRadiusForFocused) * 2,\n        width: (radius + extraRadiusForFocused) * 2,\n        marginLeft: extraRadiusForFocused * 2,\n        marginTop: extraRadiusForFocused * 2,\n      }}>\n      {props.data.length > 1 &&\n        props.data[selectedIndex] && // don't forget to add this one so there are no errors when the data is empty / updating\n        (props.focusOnPress || props.sectionAutoFocus) &&\n        selectedIndex !== -1 && (\n          <View\n            style={{\n              position: 'absolute',\n              top: -extraRadiusForFocused,\n              left: -extraRadiusForFocused,\n            }}>\n            <PieChartMain\n              {...props}\n              data={[\n                {\n                  value: props.data[selectedIndex].value,\n                  color:\n                    props.data[selectedIndex].color ||\n                    pieColors[selectedIndex % 9],\n                  strokeColor:\n                    props.data[selectedIndex].strokeColor || undefined,\n                  strokeWidth:\n                    props.data[selectedIndex].strokeWidth || undefined,\n                  gradientCenterColor:\n                    props.data[selectedIndex].gradientCenterColor || undefined,\n                },\n                {\n                  value: total - props.data[selectedIndex].value,\n                  peripheral: true,\n                  strokeWidth: 0,\n                },\n              ]}\n              radius={radius + extraRadiusForFocused}\n              initialAngle={startAngle}\n              showText={false}\n              innerRadius={props.innerRadius || radius / 2.5}\n              isBiggerPie\n              setSelectedIndex={setSelectedIndex}\n            />\n          </View>\n        )}\n      <View style={{position: 'absolute'}}>\n        <PieChartMain\n          {...props}\n          selectedIndex={selectedIndex}\n          setSelectedIndex={setSelectedIndex}\n        />\n      </View>\n    </View>\n  );\n};\n"],"mappings":";;;;AAAA,OAAOA,KAAK,IAAGC,SAAS,EAAEC,QAAQ,QAAO,OAAO;AAAC,OAAAC,IAAA;AAEjD,SAAQC,YAAY;AAEpB,SAAQC,SAAS;AAA4B,SAAAC,GAAA,IAAAC,IAAA;AAAA,SAAAC,IAAA,IAAAC,KAAA;AAuE7C,OAAO,IAAMC,QAAQ,GAAG,SAAXA,QAAQA,CAAIC,KAAgB,EAAK;EAAA,IAAAC,qBAAA;EAC5C,IAAMC,MAAM,GAAGF,KAAK,CAACE,MAAM,IAAI,GAAG;EAClC,IAAMC,qBAAqB,GACzB,EAAAF,qBAAA,GAAAD,KAAK,CAACG,qBAAqB,YAAAF,qBAAA,GAC1BD,KAAK,CAACI,YAAY,IAAIJ,KAAK,CAACK,gBAAgB,IACzCH,MAAM,GAAG,EAAE,GACX,CAAC;EACP,IAAMI,EAAE,GAAGN,KAAK,CAACO,UAAU,GAAGC,IAAI,CAACC,EAAE,GAAG,CAAC,GAAGD,IAAI,CAACC,EAAE;EACnD,IAAAC,SAAA,GAA0CnB,QAAQ,CAAC,CAAC,CAAC,CAAC;IAAAoB,UAAA,GAAAC,cAAA,CAAAF,SAAA;IAA/CG,aAAa,GAAAF,UAAA;IAAEG,gBAAgB,GAAAH,UAAA;EAEtC,IAAAI,UAAA,GAAoCxB,QAAQ,CAC1CS,KAAK,CAACgB,YAAY,KAAKhB,KAAK,CAACO,UAAU,GAAG,CAACD,EAAE,GAAG,CAAC,CACnD,CAAC;IAAAW,UAAA,GAAAL,cAAA,CAAAG,UAAA;IAFMG,UAAU,GAAAD,UAAA;IAAEE,aAAa,GAAAF,UAAA;EAGhC,IAAAG,UAAA,GAA0B7B,QAAQ,CAAC,CAAC,CAAC;IAAA8B,UAAA,GAAAT,cAAA,CAAAQ,UAAA;IAA9BE,KAAK,GAAAD,UAAA;IAAEE,QAAQ,GAAAF,UAAA;EAEtB/B,SAAS,CAAC,YAAM;IAEd,IAAIkC,QAAQ,GAAG,CAAC;IAChBxB,KAAK,CAACyB,IAAI,CAACC,OAAO,CAAC,UAAAC,IAAI,EAAI;MACzBH,QAAQ,IAAIG,IAAI,CAACC,KAAK;IACxB,CAAC,CAAC;IACFL,QAAQ,CAACC,QAAQ,CAAC;IAGlB,IAAMK,gBAAgB,GAAG7B,KAAK,CAACyB,IAAI,CAACK,SAAS,CAC3C,UAAAH,IAAI;MAAA,OAAIA,IAAI,CAACI,OAAO,KAAK,IAAI;IAAA,CAC/B,CAAC;IACDjB,gBAAgB,CAACe,gBAAgB,CAAC;IAGlC,IAAIG,aAAa,GAAGhC,KAAK,CAACgB,YAAY,KAAKhB,KAAK,CAACO,UAAU,GAAG,CAACD,EAAE,GAAG,CAAC,CAAC;IACtE,IAAIuB,gBAAgB,KAAK,CAAC,CAAC,EAAE;MAG3B,IAAMI,sBAAsB,GAAGjC,KAAK,CAACyB,IAAI,CACtCS,KAAK,CAAC,CAAC,EAAEL,gBAAgB,CAAC,CAC1BM,MAAM,CAAC,UAACC,GAAG,EAAET,IAAI;QAAA,OAAKS,GAAG,GAAGT,IAAI,CAACC,KAAK;MAAA,GAAE,CAAC,CAAC;MAC7CT,aAAa,CACXa,aAAa,GAAI,CAAC,GAAG1B,EAAE,GAAG2B,sBAAsB,IAAKT,QAAQ,IAAI,CAAC,CACpE,CAAC;IACH,CAAC,MAAM;MACLL,aAAa,CAACa,aAAa,CAAC;IAC9B;EACF,CAAC,EAAE,CAAChC,KAAK,CAACyB,IAAI,EAAEzB,KAAK,CAACgB,YAAY,EAAEhB,KAAK,CAACO,UAAU,CAAC,CAAC;EAEtDjB,SAAS,CAAC,YAAM;IACd,IAAIuB,aAAa,KAAK,CAAC,CAAC,EAAE;MACxB,IAAMmB,aAAa,GAAGhC,KAAK,CAACgB,YAAY,KAAKhB,KAAK,CAACO,UAAU,GAAG,CAACD,EAAE,GAAG,CAAC,CAAC;MACxE,IAAI+B,KAAK,GAAG,CAAC;MACb,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGzB,aAAa,EAAEyB,CAAC,EAAE,EAAE;QACtCD,KAAK,IAAIrC,KAAK,CAACyB,IAAI,CAACa,CAAC,CAAC,CAACV,KAAK;MAC9B;MACA,IAAIN,KAAK,EAAE;QACTH,aAAa,CAACa,aAAa,GAAI,CAAC,GAAG1B,EAAE,GAAG+B,KAAK,IAAKf,KAAK,IAAI,CAAC,CAAC,CAAC;MAChE;IACF;EACF,CAAC,EAAE,CAACT,aAAa,CAAC,CAAC;EAEnB,IAAI,CAACS,KAAK,EAAE,OAAO,IAAI;EAEvB,OACExB,KAAA,CAACN,IAAI;IACH+C,KAAK,EAAE;MACLC,MAAM,EAAE,CAACtC,MAAM,GAAGC,qBAAqB,IAAI,CAAC;MAC5CsC,KAAK,EAAE,CAACvC,MAAM,GAAGC,qBAAqB,IAAI,CAAC;MAC3CuC,UAAU,EAAEvC,qBAAqB,GAAG,CAAC;MACrCwC,SAAS,EAAExC,qBAAqB,GAAG;IACrC,CAAE;IAAAyC,QAAA,GACD5C,KAAK,CAACyB,IAAI,CAACoB,MAAM,GAAG,CAAC,IACpB7C,KAAK,CAACyB,IAAI,CAACZ,aAAa,CAAC,KACxBb,KAAK,CAACI,YAAY,IAAIJ,KAAK,CAACK,gBAAgB,CAAC,IAC9CQ,aAAa,KAAK,CAAC,CAAC,IAClBjB,IAAA,CAACJ,IAAI;MACH+C,KAAK,EAAE;QACLO,QAAQ,EAAE,UAAU;QACpBC,GAAG,EAAE,CAAC5C,qBAAqB;QAC3B6C,IAAI,EAAE,CAAC7C;MACT,CAAE;MAAAyC,QAAA,EACFhD,IAAA,CAACH,YAAY,EAAAwD,aAAA,CAAAA,aAAA,KACPjD,KAAK;QACTyB,IAAI,EAAE,CACJ;UACEG,KAAK,EAAE5B,KAAK,CAACyB,IAAI,CAACZ,aAAa,CAAC,CAACe,KAAK;UACtCsB,KAAK,EACHlD,KAAK,CAACyB,IAAI,CAACZ,aAAa,CAAC,CAACqC,KAAK,IAC/BxD,SAAS,CAACmB,aAAa,GAAG,CAAC,CAAC;UAC9BsC,WAAW,EACTnD,KAAK,CAACyB,IAAI,CAACZ,aAAa,CAAC,CAACsC,WAAW,IAAIC,SAAS;UACpDC,WAAW,EACTrD,KAAK,CAACyB,IAAI,CAACZ,aAAa,CAAC,CAACwC,WAAW,IAAID,SAAS;UACpDE,mBAAmB,EACjBtD,KAAK,CAACyB,IAAI,CAACZ,aAAa,CAAC,CAACyC,mBAAmB,IAAIF;QACrD,CAAC,EACD;UACExB,KAAK,EAAEN,KAAK,GAAGtB,KAAK,CAACyB,IAAI,CAACZ,aAAa,CAAC,CAACe,KAAK;UAC9C2B,UAAU,EAAE,IAAI;UAChBF,WAAW,EAAE;QACf,CAAC,CACD;QACFnD,MAAM,EAAEA,MAAM,GAAGC,qBAAsB;QACvCa,YAAY,EAAEE,UAAW;QACzBsC,QAAQ,EAAE,KAAM;QAChBC,WAAW,EAAEzD,KAAK,CAACyD,WAAW,IAAIvD,MAAM,GAAG,GAAI;QAC/CwD,WAAW;QACX5C,gBAAgB,EAAEA;MAAiB,EACpC;IAAC,CACE,CACP,EACHlB,IAAA,CAACJ,IAAI;MAAC+C,KAAK,EAAE;QAACO,QAAQ,EAAE;MAAU,CAAE;MAAAF,QAAA,EAClChD,IAAA,CAACH,YAAY,EAAAwD,aAAA,CAAAA,aAAA,KACPjD,KAAK;QACTa,aAAa,EAAEA,aAAc;QAC7BC,gBAAgB,EAAEA;MAAiB,EACpC;IAAC,CACE,CAAC;EAAA,CACH,CAAC;AAEX,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}